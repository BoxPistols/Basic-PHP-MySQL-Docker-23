version: '3.1'

services:
  mysql:
    image: mysql:latest
    container_name: mysql-container
  environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
  ports:
    - "3306:3306"
  volumes:
    - mysql-data:/var/lib/mysql

  php:
    image: php:apache
    container_name: php-container
    volumes:
      - ./src:/var/www/html
    depends_on:
      - mysql
    ports:
      - "80:80"

volumes:
  mysql-data:

# この docker-compose.yml ファイルは、Docker Composeを使用して2つのサービス、すなわち mysql と php を定義しています。

# mysql:latest イメージを使用します。
# コンテナの名前は mysql-container です。
# 環境変数として、MySQLのrootパスワード、データベース名、ユーザー名、ユーザーパスワードを設定します。これらの値は、Docker Composeが実行される環境から取得されます。
# ポート3306を開放し、ホストとコンテナの間でマッピングします。
# ボリューム mysql-data を /var/lib/mysql にマウントします。これにより、データはコンテナのライフサイクルを超えて保持されます。
# php サービス:

# php:apache イメージを使用します。
# コンテナの名前は php-container です。
# ローカルの ./src ディレクトリをコンテナの /var/www/html にマウントします。これにより、PHPアプリケーションのコードがコンテナに利用可能になります。
# mysql サービスに依存しています。これは、mysql サービスが php サービスより先に起動することを意味します。
# ポート80を開放し、ホストとコンテナの間でマッピングします。
# 最後に、mysql-data ボリュームを定義しています。これは、上記の mysql サービスで使用されます。
